{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Coho","text":"<p>Coho is a Python-based platform designed for simulating coded holography experiments. It provides a comprehensive set of tools for modeling, simulating, and analyzing holographic imaging systems that use coded apertures and coherent light sources.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Extensible and modular architecture</li> <li>Customizable experimental configurations</li> <li>Developer-friendly with comprehensive examples</li> </ul>"},{"location":"#getting-started-guide","title":"Getting Started Guide","text":"<ul> <li>Installation: Step-by-step installation guide</li> <li>Quick Start: Get started with basic examples</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Visit our GitHub repository</li> <li>Report issues on our Issue Tracker</li> </ul>"},{"location":"#future-development","title":"Future Development","text":"<p>Coho is under active development. Please check back for updates and new features.</p> <p>Planned features include:</p> <ul> <li>GPU acceleration support for faster computations</li> <li>PyTorch integration for enhanced tensor operations and deep learning capabilities</li> <li>Additional optimization methods and reconstruction algorithms</li> </ul> <p>Want to contribute? Check out our Contribution Guidelines on GitHub.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.12 or higher</li> <li>Dependencies: Managed via Poetry</li> </ul>"},{"location":"installation/#installing-from-pypi","title":"Installing from PyPI","text":"<p>Note: Coho is not available on PyPI yet.</p> <p>You can install Coho directly from PyPI using <code>pip</code>:</p> <pre><code>pip install coho\n</code></pre> <p>For an isolated environment (recommended), use:</p> <pre><code># Create a new virtual environment named 'mycoho'\npython -m venv mycoho\n\n# Activate the virtual environment\nsource venv/bin/activate\n\n# Install Coho in the virtual environment\npip install coho\n</code></pre>"},{"location":"installation/#installing-from-source","title":"Installing from Source","text":"<p>To install Coho from the source code:</p> <pre><code># Clone the repository\ngit clone https://github.com/yourusername/coho.git\ncd coho\n\n# Install Poetry if you haven't already\npip install poetry\n\n# Or using the official installer script\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Or using Homebrew\nbrew install poetry\n\n# Install Coho and its dependencies \npoetry install\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that Coho was installed correctly:</p> <pre><code>coho --version\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Ensure you have the correct Python version installed</li> <li>Update pip to the latest version: <code>pip install --upgrade pip</code></li> <li>Check our GitHub Issues for known problems</li> <li>For Poetry-related issues, refer to the Poetry documentation</li> </ol>"},{"location":"license/","title":"License","text":"<p>Coho is licensed under the BSD 3-Clause License. </p> <p>This permissive license allows you to freely use, modify, and distribute this software in both private and commercial projects, provided you include the original copyright notice and disclaimer. </p> <p>While we strive to make Coho reliable and robust, the software is provided \"as is\" without warranty, but don't worry... That's a feature, not a bug.</p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Coho package installed (see installation guide)</li> <li>Familiarity with Python programming and YAML configuration files </li> <li>Understanding of basic components in optical physics and wave propagation</li> </ul>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<p>Coho enables users to design custom imaging setups through configuration files. Users can define wavefronts, optical elements like coded apertures, samples in the beam path, and detectors. Each component can be customized with specific properties, including wave characteristics, material details, and geometry, allowing for tailored imaging simulations.</p>"},{"location":"quickstart/#create-a-configuration-file","title":"Create a Configuration File","text":"<p>Here\u2019s an example configuration file for a typical holography setup. This setup models a wavefront propagating through a system with a coded aperture and a thin object before being recorded by a detector. The configuration specifies all essential components, including their positions and physical properties. For a detailed explanation of configuration options and parameters, refer to the Configuration Guide.</p> <p>Create a file named <code>myconfig.yaml</code> with the following content:</p> <pre><code>experiment:\n  id: \"my_experiment\"\n  model: \"holography\"\n  properties:\n    components:\n      - \"my_wavefront\"\n      - \"my_aperture\"\n      - \"my_sample\"\n      - \"my_detector\"\n\n\nsimulation:\n  wavefront:\n    id: my_wavefront\n    model: constant\n    properties:\n      physical:\n        amplitude: 1.0\n        phase: 1.0\n        energy: 10.0\n      grid:\n        size: 512\n        spacing: 0.0001\n      geometry:\n        position:\n          z: 0.0\n\n  optic:\n    id: \"my_aperture\"\n    model: \"coded_aperture\"\n    properties:\n      physical:\n        formula: \"Au\"\n        density: 19.3\n        thickness: 0.0001\n      profile:\n        model: \"binary_random\"\n        bit_size: 64\n        seed: 0\n      geometry:\n        position:\n          z: 1.0\n\n  sample:\n    id: \"my_sample\"\n    model: \"custom_profile\"\n    properties:\n      physical:\n        formula: \"C5H8O2\"\n        density: 1.18\n        thickness: 0.001\n      profile:\n        model: \"custom_profile\"\n        file_path: \"coho/resources/samples/lena.npy\"\n      geometry:\n        position:\n          z: 2.0\n\n  detector:\n    id: \"my_detector\"\n    model: \"integrating\"\n    properties: \n      geometry:\n        position:\n          z: 100.0\n\noperator:\n  propagator:\n    id: \"my_propagator\"\n    model: \"fresnel\"\n\n  interactor:\n    id: \"my_interactor\"\n    model: \"thin_object\"\n</code></pre> <p>You can download the example configuration file here.</p>"},{"location":"quickstart/#create-a-python-script","title":"Create a Python Script","text":"<p>Create a file named <code>myscript.py</code> with the following code to run the simulation and visualize the intensity of the wavefront at the detector after it passes through the system defined in <code>myconfig.yaml</code>:</p> <pre><code>import coho\nimport matplotlib.pyplot as plt\n\n# Load configuration from file\nconfig = coho.load_config(\"myconfig.yaml\")\n\n# Create and run simulation\nforward = coho.Holography(config)\nimage = forward.run()\n\n# Plot detector image\nplt.imshow(image[0], cmap='gray')\nplt.title(\"Image captured by detector\")\nplt.colorbar()\nplt.show()\n</code></pre> <p>You can download the example script here.</p>"},{"location":"quickstart/#run-the-simulation","title":"Run the Simulation","text":"<p>Run the simulation using Python by executing the following command in your terminal: <pre><code>python myscript.py\n</code></pre></p> <p>Voila! You've just run your first Coho simulation.</p> <p>For more detailed examples and advanced usage, check out the Examples section.</p>"},{"location":"contributing/","title":"Contributing to Coho","text":"<p>Thank you for considering contributing to Coho! We welcome contributions of all kinds, including bug reports, feature requests, documentation improvements, and code contributions. Happy contributing!</p>"},{"location":"contributing/#how-to-get-started","title":"How to Get Started","text":"<ol> <li>Read the Documentation: Review the Quick Start and Usage sections.</li> <li>Install the Development Environment: Follow the Developer Setup Guide.</li> <li>Understand the Code: See the API Reference for project architecture.</li> </ol>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":"<ul> <li>Reporting Issues: File an issue with steps to reproduce.</li> <li>Suggesting Features: Open a feature request explaining the improvement.</li> <li>Improving Documentation: Help make our docs clearer. </li> <li>Contributing Code: Follow our Code Style and Conventions.</li> </ul> <p>Check out the Developer Setup Guide to get started.</p>"},{"location":"contributing/api_reference/","title":"API Reference","text":"<p>Not yet available online. Check out the source code for now.</p>"},{"location":"contributing/api_reference/#configuration-management","title":"Configuration Management","text":"<p>The <code>Config</code> component in Coho manages user input configurations by processing files (e.g., YAML, JSON), validating their content against predefined schemas, mapping the data to structured Python objects implemented as data classes. These objects are then made accessible to core packages. It supports reliable validation and efficient integration of configuration data.</p> <p>The configuration management process follows these steps:</p> <ol> <li>Data Reading: Configuration file content is read.</li> <li>Validation: Data is validated against a predefined schema.</li> <li>Building Models: Validated data is converted into a Pydantic model.</li> <li>Deployment: The model is accessible to other components in the codebase.</li> </ol>"},{"location":"contributing/code_of_conduct/","title":"Code of Conduct","text":"<p>We adhere to the Contributor Covenant code of conduct.</p>"},{"location":"contributing/code_style/","title":"Code Style and Conventions","text":"<p>This guide outlines the coding standards and conventions for Coho. Take it with a grain of salt.</p>"},{"location":"contributing/code_style/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Code Style: Follow PEP 8 as closely as possible.</li> <li>Indentation: 4 spaces (no tabs)</li> <li>Line Length: Maximum 88 characters </li> <li>Docstrings: Use Google-style docstrings.</li> <li>Type Hints: Include type hints for all public APIs.</li> </ul>"},{"location":"contributing/code_style/#example-style","title":"Example Style","text":"<p>Here's an example of how to format your code:</p> <pre><code>from typing import List, Optional\n\nclass WavePropagator:\n    \"\"\"Class for wave propagation calculations.\n\n    Attributes:\n        wavelength: The wavelength in meters\n        grid_size: Size of the computation grid\n    \"\"\"\n\n    def __init__(self, wavelength: float, grid_size: int = 512):\n        self.wavelength = wavelength\n        self.grid_size = grid_size\n\n    def propagate(self, field: np.ndarray, distance: float) -&gt; np.ndarray:\n        \"\"\"Propagates the wave field.\n\n        Args:\n            field: Input complex field\n            distance: Propagation distance in meters\n\n        Returns:\n            Propagated complex field\n        \"\"\"\n        # Implementation\n        pass\n</code></pre> <p>Now that you've developed your code, check out how to submit a pull request.</p>"},{"location":"contributing/pull_request/","title":"Pull Request Guidelines","text":"<p>Pull requests are the primary way to contribute code changes to Coho. Here are our guidelines for submitting PRs.</p>"},{"location":"contributing/pull_request/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>Try to follow the PR title and description format below.</p>"},{"location":"contributing/pull_request/#pr-title-format","title":"PR Title Format","text":"<p><pre><code>[TYPE] Brief description\n</code></pre> Where <code>TYPE</code> is one of: <code>FEATURE</code>, <code>FIX</code>, <code>DOCS</code>, <code>STYLE</code>, <code>REFACTOR</code>, <code>TEST</code></p>"},{"location":"contributing/pull_request/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Related Issue\nFixes #(issue)\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Code style update\n\n## Testing\nDescribe testing done\n\n## Screenshots\nIf applicable\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Tests added/updated\n- [ ] Documentation updated\n- [ ] All tests passing\n</code></pre> <p>Submit your PR and wait for it to be reviewed.</p> <p>Note:  To submit a PR:</p> <ol> <li> <p>Fork and branch:    <pre><code>git checkout -b feature/your-feature-name  # Use descriptive branch names\n</code></pre></p> </li> <li> <p>Stage changes and commit:    <pre><code>git add .\ngit commit -m \"[TYPE] Brief description\"  # Be clear and concise\n</code></pre></p> </li> <li> <p>Push and set upstream:    <pre><code>git push -u origin feature/your-feature-name  # -u links local and remote branches\n</code></pre></p> </li> <li> <p>Open PR on Coho repository</p> </li> <li> <p>Add title, description, and related issues</p> </li> <li> <p>(optional) Clean up branches after merge:    <pre><code># Delete local branch\ngit branch -d feature/your-feature-name\n\n# Delete remote branch\ngit push origin --delete feature/your-feature-name\n\n# Clean up stale remote references\ngit fetch --prune\n</code></pre></p> </li> </ol>"},{"location":"contributing/pull_request/#review-process","title":"Review Process","text":"<p>We (plan to) use GitHub Actions to run tests and linting. We also have a code of conduct that contributors must adhere to.</p>"},{"location":"contributing/setup_guide/","title":"Developer Setup Guide","text":"<p>This guide provides a step-by-step setup process for developing Coho.</p>"},{"location":"contributing/setup_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git for cloning the repository and managing commits</li> <li>Poetry for managing Python dependencies</li> <li>MkDocs for building and previewing the documentation locally</li> <li>Pre-commit for running pre-commit hooks (optional)</li> </ul>"},{"location":"contributing/setup_guide/#environment-setup","title":"Environment Setup","text":"<p>This section guides you through setting up your local development environment.</p>"},{"location":"contributing/setup_guide/#clone-the-repository","title":"Clone the Repository","text":"<p>Coho is hosted on GitHub. Use the following commands to clone the repository and install the project dependencies:</p> <pre><code># Clone the repository\ngit clone https://github.com/dgursoy/coho.git\ncd coho\n\n# Install project dependencies using Poetry\npoetry install\n\n# Create and activate the virtual environment\npoetry shell\n\n# Verify the installation\npoetry run python -c \"import coho; print(coho.__version__)\"\n</code></pre>"},{"location":"contributing/setup_guide/#managing-dependencies","title":"Managing Dependencies","text":"<p>Coho uses Poetry for dependency management. Here's how to manage project dependencies:</p> <pre><code># Add a production dependency\npoetry add numpy\n\n# Add a development-only dependency\npoetry add --group dev black\n\n# Add a documentation-related dependency\npoetry add --group docs mkdocs-material\n\n# Install pre-commit as a dev dependency\npoetry add --group dev pre-commit\n</code></pre> <p>Note: You can also manually edit dependencies in <code>pyproject.toml</code> in the project root. </p> <p>Coho uses a lock file to manage dependencies. To update the lock file after any changes to dependencies:</p> <pre><code>poetry lock  # Update the lock file\npoetry install  # Apply the changes\n</code></pre> <p>Note: If you want to update all dependencies to their latest compatible versions:</p> <pre><code>poetry update\n</code></pre> <p>See, much easier than others!</p>"},{"location":"contributing/setup_guide/#testing-environment","title":"Testing Environment","text":"<p>To verify your environment setup is correct:</p> <pre><code>poetry run pytest tests/\n</code></pre> <p>Note: Always use <code>poetry run</code> to ensure tests run within the project's virtual environment. Running <code>pytest tests</code> directly will either use your global Python environment (which may have different package versions) or fail if <code>pytest</code> isn't installed globally.</p>"},{"location":"contributing/setup_guide/#documentation-setup","title":"Documentation Setup","text":"<p>The documentation is located in the <code>docs</code> folder in the project root. You can build and preview the documentation locally using MkDocs:</p> <pre><code># Start the documentation server with live preview\npoetry run mkdocs serve\n\n# Access the documentation in your browser\n# View at http://localhost:8000\n</code></pre>"},{"location":"contributing/setup_guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit to run automated checks before each commit, configured via <code>.pre-commit-config.yaml</code> in the project root.</p> <pre><code># Install pre-commit as a dev dependency\npoetry add --group dev pre-commit\n\n# Install pre-commit hooks into your local repository\npoetry run pre-commit install\n\n# Run all pre-commit checks on staged files (those about to be committed)\npoetry run pre-commit run\n</code></pre> <p>Note: When you make a git commit, <code>pre-commit</code> automatically runs on only the staged files (those being committed). The <code>--all-files</code> flag is useful for checking your entire codebase, including files that aren't tracked by git yet.</p> <p>Common Commands: <pre><code># Update hooks to latest versions\npoetry run pre-commit autoupdate\n\n# Check all files (including untracked, respects .gitignore)\npoetry run pre-commit run --all-files\n\n# Check specific files\npoetry run pre-commit run --files path/to/file.py\n\n# Check specific file types\npoetry run pre-commit run --files \"*.py\" \"*.yaml\"\n\n# Clean up hooks to remove unused hooks\npoetry run pre-commit clean\n</code></pre></p> <p>Note: It's recommended to set up pre-commit hooks right after cloning the repository to ensure code quality from the start.</p> <p>Now that you've set up your development environment, check out the code style guide before writing any code.</p>"},{"location":"examples/","title":"Examples","text":"<p>Note: This section is under development.</p>"},{"location":"usage/","title":"Using Coho","text":"<p>The logic of Coho involves describing the components of a holography setup and the experiment states, and then running the simulation to acquire data. The following steps describe the process:</p>"},{"location":"usage/#key-topics","title":"Key Topics","text":"<ul> <li>Configuration Guide: Configuration options and management</li> <li>Component Definitions: Define the components in the simulation</li> <li>Experiment Definitions: Define the experiment states</li> <li>Runtime Operations: Define runtime operations for the simulation (or reconstruction)</li> </ul> <p>Each topic is covered in detail in its respective section. Start with Quick Start if you're new to coded holography or the Coho package before diving into the details.</p> <p>Also, check out the Examples section to see practical applications and analysis workflows.</p> <p>Note: Some documentation sections are still under development. If you find missing or incomplete information, please check our GitHub repository for the latest updates or submit an issue to report the problem.</p>"},{"location":"usage/configuration/","title":"Configuration Guide","text":"<p>We use configuration files to define the components in the simulation and the experiment states. The configuration files are written in YAML, JSON, or TOML format. If your configuration file doesn't match the expected schema, Coho will provide error messages to help you identify and fix any issues</p>"},{"location":"usage/configuration/#structure-and-requirements","title":"Structure and Requirements","text":"<p>The experiment configuration includes the following sections:</p> <ul> <li><code>simulation</code>: Defines the components in the simulation, including wavefront, optic, sample, and detector.</li> <li><code>operator</code>: Defines the operators, including propagator and interactor.</li> <li><code>experiment</code>: Defines the experiment, including components and experiment states.</li> </ul>"},{"location":"usage/configuration/#configuration-example","title":"Configuration Example","text":"<p>Here's an example component configuration in YAML:</p> <pre><code>simulation:\n  wavefront:\n    id: \"my_source\"\n    model: \"gaussian\"\n    properties: \n      physical:\n        amplitude: 1.0\n        phase: 0.0\n        energy: 10.0\n      profile:\n        sigma: 256\n        width: 512\n        height: 512\n      grid:\n        size: 512\n        spacing: 0.0001\n      geometry:\n        position:\n          x: 0.0\n          y: 0.0\n          z: 0.0\n        rotation: 0.0\n</code></pre> <p>Each component needs an <code>id</code> as a unique identifier, a <code>model</code> to specify its behavior, and <code>properties</code> that include both component-specific properties (like <code>physical</code> and <code>profile</code>) as well as common properties (like <code>grid</code> and <code>geometry</code>).</p> <p>We can access the configuration in Python as follows:</p> <pre><code>from coho import load_config\n\n# Build data classes from configuration file\nconfig = load_config(\"snippets/test_config.yaml\")\n\n# Access data classes\nsimulation = config.simulation\nwavefront = simulation.wavefront\n\n# Properties are strongly typed\nprint(f\"Wavefront amplitude: {wavefront.properties.physical.amplitude}\")\n</code></pre>"},{"location":"usage/components/","title":"Components","text":"<p>A typical coded holography setup consists of four key components:</p> <ul> <li> <p>Wavefront is a 2D cross-section of a 3D wave propagating through space between the source and the detector. It is described by the complex wave field, which represents the wave's amplitude and phase at a specific plane. </p> </li> <li> <p>Aperture is an optical element that encodes the reference wavefront by modifying its amplitude and phase. This modification is described by a complex transmission function, determined by the aperture's material properties, such as composition, density, thickness, and the energy of the incident wave. </p> </li> <li> <p>Sample represents the object of interest in the holography setup. It also modifies the incident wavefront via a complex transmission function, influenced by the sample's physical and material properties.</p> </li> <li> <p>Detector records the intensity of the wavefront at the detector plane, capturing the interference pattern created by the interaction of the reference and object wavefronts.  </p> </li> </ul>"},{"location":"usage/components/aperture/","title":"Aperture","text":"<p>Note: This section is under development.</p>"},{"location":"usage/components/detector/","title":"Detector","text":"<p>Note: This section is under development.</p>"},{"location":"usage/components/sample/","title":"Sample","text":"<p>Note: This section is under development.</p>"},{"location":"usage/components/wavefront/","title":"Wavefront","text":"<p>Note: This section is under development.</p>"},{"location":"usage/experiment/","title":"Experiment Definitions","text":"<p>We define an Experiment as a sequence of states, with each state representing the configuration of the system's components during a specific data acquisition step. For example, an experiment might involve capturing a series of holograms at different sample positions or using varying illumination wavelengths. Each such configuration corresponds to a distinct state within the experiment. </p>"},{"location":"usage/experiment/states/","title":"States","text":"<p>Note: This section is under development.</p>"},{"location":"usage/runtime/","title":"Runtime Operations","text":"<p>Note: This section is under development.</p>"},{"location":"usage/runtime/devices/","title":"Devices","text":"<p>Note: This section is under development.</p>"},{"location":"usage/runtime/reconstruction/","title":"Reconstruction","text":"<p>Note: This section is under development.</p>"},{"location":"usage/runtime/simulation/","title":"Simulation","text":"<p>Note: This section is under development.</p>"}]}