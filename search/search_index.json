{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Coho","text":"<p>Coho is a Python-based platform designed for flexible and extensible imaging experiments. It provides a comprehensive set of tools for modeling, simulating, and analyzing imaging systems.</p> <p>Note: Coho is under active development. Please check back for updates and new features.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Extensible and modular architecture</li> <li>Customizable experimental configurations</li> <li>Developer-friendly with comprehensive examples</li> <li>Accelerated with JAX</li> </ul>"},{"location":"#getting-started-guide","title":"Getting Started Guide","text":"<ul> <li>Installation: Step-by-step installation guide</li> <li>Quick Start: Get started with basic examples</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Visit our GitHub repository</li> <li>Report issues on our Issue Tracker</li> </ul>"},{"location":"#future-development","title":"Future Development","text":"<p>Want to contribute? Check out our Contribution Guidelines on GitHub.</p>"},{"location":"about/","title":"About Coho","text":"<p>Coho is a Python-based platform designed for flexible and extensible imaging experiments. It provides a comprehensive set of tools for modeling, simulating, and analyzing imaging systems. It is built on top of JAX, a library for high-performance numerical computing with an emphasis on scientific computing and research-oriented workflows. </p>"},{"location":"about/#why-coho","title":"Why Coho?","text":"<p>Coho bridges the gap between scientific rigor and practical usability, making it the ideal platform for advanced imaging experiments. Its design emphasizes flexibility, scalability, and collaboration across disciplines.</p> <ul> <li> <p>Unified Framework: A single codebase for diverse imaging systems, reducing redundancy.</p> </li> <li> <p>Modularity and Collaboration: Extendable architecture supports teamwork without requiring expertise across all disciplines.</p> </li> <li> <p>Ease of Maintenance: JAX-based modular design ensures scalable, intuitive, and easily updatable code.</p> </li> </ul>"},{"location":"about/#why-jax","title":"Why JAX?","text":"<p>We use JAX for its unique combination of performance, flexibility, and ease of use. Here\u2019s why:</p> <ul> <li> <p>Functional and Modular: JAX emphasizes pure functions, ensuring clean, testable, and research-friendly code.</p> </li> <li> <p>Performance with JIT: <code>jit</code> compiles computations into efficient machine code at runtime, boosting performance.</p> </li> <li> <p>Elegant Vectorization: <code>vmap</code> simplifies batch processing, reducing manual loops and boilerplate.</p> </li> <li> <p>Scientific Focus: Native support for FFTs, complex numbers and scientific computing makes JAX ideal for research.</p> </li> <li> <p>Composability: Primitives like <code>grad</code>, <code>jit</code>, and <code>vmap</code> enable intuitive construction of complex workflows.</p> </li> <li> <p>Hardware Acceleration: Seamlessly supports CPUs, GPUs, and TPUs, making scaling easy.</p> </li> <li> <p>Parallel Processing: <code>pmap</code> facilitates parallel and distributed computation for large-scale tasks.</p> </li> <li> <p>Expanding Ecosystem: Libraries like Haiku (neural networks) and Optax (optimization) extend JAX\u2019s versatility.</p> </li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.12 or higher</li> <li>Dependencies: Managed via Poetry</li> </ul>"},{"location":"installation/#installing-from-pypi","title":"Installing from PyPI","text":"<p>Note: Coho is not available on PyPI yet.</p>"},{"location":"installation/#installing-from-source","title":"Installing from Source","text":"<p>To install Coho from the source code:</p> <pre><code># Clone the repository\ngit clone https://github.com/yourusername/coho.git\ncd coho\n\n# Install Poetry if you haven't already\npipx install poetry\n\n# Install Coho and its dependencies \npoetry install\n\n# Activate the shell\npoetry shell\n</code></pre> <p>Note: See pipx installation instructions if you don't have it already.</p>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that Coho was installed correctly:</p> <pre><code>python -c \"import coho\"\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Ensure you have the correct Python version installed</li> <li>Update poetry to the latest version: <code>pipx upgrade poetry</code></li> <li>Check our GitHub Issues for known problems</li> <li>For Poetry-related issues, refer to the Poetry documentation</li> </ol>"},{"location":"license/","title":"License","text":"<p>Coho is licensed under the BSD 3-Clause License. </p> <p>This permissive license allows you to freely use, modify, and distribute this software in both private and commercial projects, provided you include the original copyright notice and disclaimer. </p> <p>While we strive to make Coho reliable and robust, the software is provided \"as is\" without warranty, but don't worry... That's a feature, not a bug.</p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Coho package installed (see installation guide)</li> <li>Familiarity with Python programming </li> <li>Basic understanding of optical physics and wave propagation</li> </ul>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<p>Coho enables users to design custom imaging setups. Users can define both the components of imaging systems such as wavefronts, optical elements like apertures, samples in the beam path, and detectors, as well as components of the reconstruction process such as cost functions and solvers. </p>"},{"location":"quickstart/#example","title":"Example","text":"<p>Note: This example is under development.</p>"},{"location":"contributing/","title":"Contributing to Coho","text":"<p>Thank you for considering contributing to Coho! We welcome contributions of all kinds, including bug reports, feature requests, documentation improvements, and code contributions. Happy contributing!</p>"},{"location":"contributing/#how-to-get-started","title":"How to Get Started","text":"<ol> <li>Read the Documentation: Review the Quick Start and Usage sections.</li> <li>Install the Development Environment: Follow the Developer Setup Guide.</li> <li>Understand the Code: See the API Reference for project architecture.</li> </ol>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":"<ul> <li>Reporting Issues: File an issue with steps to reproduce.</li> <li>Suggesting Features: Open a feature request explaining the improvement.</li> <li>Improving Documentation: Help make our docs clearer. </li> <li>Contributing Code: Follow our Code Style and Conventions.</li> </ul> <p>Check out the Developer Setup Guide to get started.</p>"},{"location":"contributing/api_reference/","title":"API Reference","text":"<p>Not yet available online. Check out the source code for now.</p> <p>::: coho</p>"},{"location":"contributing/code_of_conduct/","title":"Code of Conduct","text":"<p>We adhere to the Contributor Covenant code of conduct.</p>"},{"location":"contributing/code_style/","title":"Code Style and Conventions","text":"<p>This guide outlines the coding standards and conventions for Coho. Take it with a grain of salt.</p>"},{"location":"contributing/code_style/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Code Style: Follow PEP 8 as closely as possible.</li> <li>Indentation: 4 spaces (no tabs)</li> <li>Line Length: Maximum 88 characters </li> <li>Docstrings: Use Google-style docstrings.</li> <li>Type Hints: Include type hints for all public APIs.</li> </ul>"},{"location":"contributing/code_style/#example-style","title":"Example Style","text":"<p>Note: This section is under development.</p> <p>Now that you've developed your code, check out how to submit a pull request.</p>"},{"location":"contributing/pull_request/","title":"Pull Request Guidelines","text":"<p>Pull requests are the primary way to contribute code changes to Coho. Here are our guidelines for submitting PRs.</p>"},{"location":"contributing/pull_request/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>Try to follow the PR title and description format below.</p>"},{"location":"contributing/pull_request/#pr-title-format","title":"PR Title Format","text":"<p><pre><code>[TYPE] Brief description\n</code></pre> Where <code>TYPE</code> is one of: <code>NEW</code>, <code>FIX</code>, <code>DOCS</code>, <code>STYLE</code>, <code>REFACTOR</code>, <code>TEST</code></p>"},{"location":"contributing/pull_request/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Related Issue\nFixes #(issue)\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Code style update\n\n## Testing\nDescribe testing done\n\n## Screenshots\nIf applicable\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Tests added/updated\n- [ ] Documentation updated\n- [ ] All tests passing\n</code></pre> <p>Submit your PR and wait for it to be reviewed.</p> <p>Note:  To submit a PR:</p> <ol> <li> <p>Fork and branch:    <pre><code>git checkout -b feature/your-feature-name  # Use descriptive branch names\n</code></pre></p> </li> <li> <p>Stage changes and commit:    <pre><code>git add .\ngit commit -m \"[TYPE] Brief description\"  # Be clear and concise\n</code></pre></p> </li> <li> <p>Push and set upstream:    <pre><code>git push -u origin feature/your-feature-name  # -u links local and remote branches\n</code></pre></p> </li> <li> <p>Open PR on Coho repository</p> </li> <li> <p>Add title, description, and related issues</p> </li> <li> <p>(optional) Clean up branches after merge:    <pre><code># Delete local branch\ngit branch -d feature/your-feature-name\n\n# Delete remote branch\ngit push origin --delete feature/your-feature-name\n\n# Clean up stale remote references\ngit fetch --prune\n</code></pre></p> </li> </ol>"},{"location":"contributing/pull_request/#review-process","title":"Review Process","text":"<p>We (plan to) use GitHub Actions to run tests and linting. We also have a code of conduct that contributors must adhere to.</p>"},{"location":"contributing/setup_guide/","title":"Developer Setup Guide","text":"<p>This guide provides a step-by-step setup process for developing Coho.</p>"},{"location":"contributing/setup_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git for cloning the repository and managing commits</li> <li>Poetry for managing Python dependencies</li> <li>MkDocs for building and previewing the documentation locally</li> <li>Pre-commit for running pre-commit hooks (optional)</li> </ul>"},{"location":"contributing/setup_guide/#environment-setup","title":"Environment Setup","text":"<p>This section guides you through setting up your local development environment.</p>"},{"location":"contributing/setup_guide/#clone-the-repository","title":"Clone the Repository","text":"<p>Coho is hosted on GitHub. Use the following commands to clone the repository and install the project dependencies:</p> <pre><code># Clone the repository\ngit clone https://github.com/dgursoy/coho.git\ncd coho\n\n# Install project dependencies using Poetry\npoetry install\n\n# Create and activate the virtual environment\npoetry shell\n\n# Verify the installation\npoetry run python -c \"import coho; print(coho.__version__)\"\n</code></pre>"},{"location":"contributing/setup_guide/#managing-dependencies","title":"Managing Dependencies","text":"<p>Coho uses Poetry for dependency management. Here's how to manage project dependencies:</p> <pre><code># Add a production dependency\npoetry add numpy\n\n# Add a development-only dependency\npoetry add --group dev black\n\n# Add a documentation-related dependency\npoetry add --group docs mkdocs-material\n\n# Install pre-commit as a dev dependency\npoetry add --group dev pre-commit\n</code></pre> <p>Note: You can also manually edit dependencies in <code>pyproject.toml</code> in the project root. </p> <p>Coho uses a lock file to manage dependencies. To update the lock file after any changes to dependencies:</p> <pre><code>poetry lock  # Update the lock file\npoetry install  # Apply the changes\n</code></pre> <p>Note: If you want to update all dependencies to their latest compatible versions:</p> <pre><code>poetry update\n</code></pre> <p>See, much easier than others!</p>"},{"location":"contributing/setup_guide/#testing-environment","title":"Testing Environment","text":"<p>To verify your environment setup is correct:</p> <pre><code>poetry run pytest tests/\n</code></pre> <p>Note: Always use <code>poetry run</code> to ensure tests run within the project's virtual environment. Running <code>pytest tests</code> directly will either use your global Python environment (which may have different package versions) or fail if <code>pytest</code> isn't installed globally.</p>"},{"location":"contributing/setup_guide/#documentation-setup","title":"Documentation Setup","text":"<p>The documentation is located in the <code>docs</code> folder in the project root. You can build and preview the documentation locally using MkDocs:</p> <pre><code># Start the documentation server with live preview\npoetry run mkdocs serve\n\n# Access the documentation in your browser\n# View at http://localhost:8000\n</code></pre>"},{"location":"contributing/setup_guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit to run automated checks before each commit, configured via <code>.pre-commit-config.yaml</code> in the project root.</p> <pre><code># Install pre-commit as a dev dependency\npoetry add --group dev pre-commit\n\n# Install pre-commit hooks into your local repository\npoetry run pre-commit install\n\n# Run all pre-commit checks on staged files (those about to be committed)\npoetry run pre-commit run\n</code></pre> <p>Note: When you make a git commit, <code>pre-commit</code> automatically runs on only the staged files (those being committed). The <code>--all-files</code> flag is useful for checking your entire codebase, including files that aren't tracked by git yet.</p> <p>Common Commands: <pre><code># Update hooks to latest versions\npoetry run pre-commit autoupdate\n\n# Check all files (including untracked, respects .gitignore)\npoetry run pre-commit run --all-files\n\n# Check specific files\npoetry run pre-commit run --files path/to/file.py\n\n# Check specific file types\npoetry run pre-commit run --files \"*.py\" \"*.yaml\"\n\n# Clean up hooks to remove unused hooks\npoetry run pre-commit clean\n</code></pre></p> <p>Note: It's recommended to set up pre-commit hooks right after cloning the repository to ensure code quality from the start.</p> <p>Now that you've set up your development environment, check out the code style guide before writing any code.</p>"},{"location":"examples/","title":"Examples","text":"<p>Note: This section is under development.</p>"},{"location":"usage/","title":"Using Coho","text":"<p>Coho is designed with flexibility and extensibility in mind, allowing users to define their own experiments. This requires understanding the fundamentals of imaging setups, including defining the necessary operators and constructing a model that simulates the imaging process effectively.</p>"},{"location":"usage/#key-topics","title":"Key Topics","text":"<ul> <li>Waves: Wave objects and their properties</li> <li>Operators: Operators acting on waves to modify them</li> <li>Models: Models for simulating complex imaging processes</li> </ul> <p>Each topic is covered in detail in its respective section. Start with Quick Start to kick off your first experiment. Also, check out the Examples section to see built-in graphs corresponding to common imaging setups.</p> <p>Note: Some documentation sections are still under development. If you find missing or incomplete information, please check our GitHub repository for the latest updates or submit an issue to report the problem.</p>"},{"location":"usage/costs/","title":"Costs","text":"<p>Note: This section is under development.</p>"},{"location":"usage/metrics/","title":"Metrics","text":"<p>Note: This section is under development.</p>"},{"location":"usage/models/","title":"Models","text":"<p>Note: This section is under development.</p>"},{"location":"usage/monitoring/","title":"Monitoring","text":"<p>Note: This section is under development.</p>"},{"location":"usage/operators/","title":"Operators","text":"<p>Note: This section is under development.</p>"},{"location":"usage/plotting/","title":"Plotting","text":"<p>Note: This section is under development.</p>"},{"location":"usage/solvers/","title":"Solvers","text":"<p>Note: This section is under development.</p>"},{"location":"usage/wave/","title":"Waves","text":"<p>Note: This section is under development.</p>"}]}