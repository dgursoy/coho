{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to COHO Documentation","text":"<p>COHO is a Python package designed for simulating coded holography experiments.</p> <ul> <li>Introduction</li> <li>Installation</li> <li>Quick Start</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to COHO! Please refer to the CONTRIBUTING.md file for guidelines.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.7 or higher</li> <li>Dependencies: Managed via Poetry.</li> </ul>"},{"location":"installation/#installing-from-pypi","title":"Installing from PyPI","text":"<p>You can install COHO directly from PyPI using <code>pip</code>:</p> <pre><code>pip install coho\n</code></pre>"},{"location":"installation/#installing-from-source","title":"Installing from Source","text":"<p>To install COHO from the source code:</p> <pre><code>Copy code\ngit clone https://github.com/yourusername/coho.git\ncd coho\npoetry install\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>COHO provides a comprehensive toolkit for researchers and engineers to model wave propagation, material interactions, and detector responses in holographic imaging systems.</p>"},{"location":"license/","title":"License","text":"<p>COHO is licensed under the BSD3 License.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Follow these steps to quickly set up and run a simulation with COHO:</p> <ol> <li>Create a Configuration File:</li> <li> <p>Refer to the templates directory for sample configurations.</p> </li> <li> <p>Run the Simulation:</p> </li> </ol> <p>```bash    poetry run coho run config.yml</p>"},{"location":"usage/","title":"Usage Overview","text":"<p>This section covers how to use COHO's core functionalities, including wave propagation, material properties, and detector simulation.</p>"},{"location":"usage/api_reference/","title":"API Reference","text":"<p>COHO: Coherent Holography Simulation Package</p> <p>The COHO package provides tools for simulating hard X-ray coherent holography experiments.</p>"},{"location":"usage/api_reference/#coho.Component","title":"<code>Component</code>","text":"Source code in <code>coho/coho.py</code> <pre><code>class Component:\n    def __init__(self, name, params, materials_library):\n        \"\"\"\n        Base class for simulation components (apertures, objects).\n        \"\"\"\n        self.name = name\n        self.type = params.get('type')\n        self.position = params.get('position')\n\n        # Handle the material reference\n        material_ref = params.get('material')\n\n        # If material_ref is a Material instance, use it directly\n        if isinstance(material_ref, Material):\n            self.material = material_ref\n        # If material_ref is a dict, create a new Material instance\n        elif isinstance(material_ref, dict):\n            self.material = Material(\n                name=material_ref.get('name', 'Unnamed Material'),\n                formula=material_ref.get('formula'),\n                density=material_ref.get('density')\n            )\n        # If material_ref is a string, look it up in materials_library\n        elif isinstance(material_ref, str):\n            self.material = materials_library.get(material_ref)\n            if self.material is None:\n                raise ValueError(f\"Material '{material_ref}' not found in materials_library.\")\n        else:\n            raise TypeError(\"Invalid material reference.\")\n\n        self.thickness = params.get('thickness')  # [\u00b5m]\n        self.pattern = params.get('pattern', {})\n\n    def __repr__(self):\n        return f\"Component(name={self.name}, type={self.type}, position={self.position} cm)\"\n</code></pre>"},{"location":"usage/api_reference/#coho.Component.__init__","title":"<code>__init__(name, params, materials_library)</code>","text":"<p>Base class for simulation components (apertures, objects).</p> Source code in <code>coho/coho.py</code> <pre><code>def __init__(self, name, params, materials_library):\n    \"\"\"\n    Base class for simulation components (apertures, objects).\n    \"\"\"\n    self.name = name\n    self.type = params.get('type')\n    self.position = params.get('position')\n\n    # Handle the material reference\n    material_ref = params.get('material')\n\n    # If material_ref is a Material instance, use it directly\n    if isinstance(material_ref, Material):\n        self.material = material_ref\n    # If material_ref is a dict, create a new Material instance\n    elif isinstance(material_ref, dict):\n        self.material = Material(\n            name=material_ref.get('name', 'Unnamed Material'),\n            formula=material_ref.get('formula'),\n            density=material_ref.get('density')\n        )\n    # If material_ref is a string, look it up in materials_library\n    elif isinstance(material_ref, str):\n        self.material = materials_library.get(material_ref)\n        if self.material is None:\n            raise ValueError(f\"Material '{material_ref}' not found in materials_library.\")\n    else:\n        raise TypeError(\"Invalid material reference.\")\n\n    self.thickness = params.get('thickness')  # [\u00b5m]\n    self.pattern = params.get('pattern', {})\n</code></pre>"},{"location":"usage/api_reference/#coho.Detector","title":"<code>Detector</code>","text":"Source code in <code>coho/coho.py</code> <pre><code>class Detector:\n    def __init__(self, name, params, materials_library):\n        \"\"\"\n        Base class for detectors.\n        \"\"\"\n        self.name = name\n        self.type = params.get('type')\n        self.position = params.get('position')  # [cm]\n        self.pixel_size = params.get('pixel_size')  # [\u00b5m]\n        self.resolution = params.get('resolution')\n        self.parameters = params.copy()\n        scintillator_info = self.parameters.get('scintillator')\n        if scintillator_info and 'material' in scintillator_info:\n            material_ref = scintillator_info.get('material')\n            # Similar handling as in Component\n            if isinstance(material_ref, Material):\n                self.parameters['scintillator']['material'] = material_ref\n            elif isinstance(material_ref, dict):\n                self.parameters['scintillator']['material'] = Material(\n                    name=material_ref.get('name', 'Unnamed Material'),\n                    formula=material_ref.get('formula'),\n                    density=material_ref.get('density')\n                )\n            elif isinstance(material_ref, str):\n                self.parameters['scintillator']['material'] = materials_library.get(material_ref)\n                if self.parameters['scintillator']['material'] is None:\n                    raise ValueError(f\"Material '{material_ref}' not found in materials_library.\")\n            else:\n                raise TypeError(\"Invalid scintillator material reference.\")\n\n    def __repr__(self):\n        return f\"Detector(name={self.name}, type={self.type}, position={self.position} cm)\"\n</code></pre>"},{"location":"usage/api_reference/#coho.Detector.__init__","title":"<code>__init__(name, params, materials_library)</code>","text":"<p>Base class for detectors.</p> Source code in <code>coho/coho.py</code> <pre><code>def __init__(self, name, params, materials_library):\n    \"\"\"\n    Base class for detectors.\n    \"\"\"\n    self.name = name\n    self.type = params.get('type')\n    self.position = params.get('position')  # [cm]\n    self.pixel_size = params.get('pixel_size')  # [\u00b5m]\n    self.resolution = params.get('resolution')\n    self.parameters = params.copy()\n    scintillator_info = self.parameters.get('scintillator')\n    if scintillator_info and 'material' in scintillator_info:\n        material_ref = scintillator_info.get('material')\n        # Similar handling as in Component\n        if isinstance(material_ref, Material):\n            self.parameters['scintillator']['material'] = material_ref\n        elif isinstance(material_ref, dict):\n            self.parameters['scintillator']['material'] = Material(\n                name=material_ref.get('name', 'Unnamed Material'),\n                formula=material_ref.get('formula'),\n                density=material_ref.get('density')\n            )\n        elif isinstance(material_ref, str):\n            self.parameters['scintillator']['material'] = materials_library.get(material_ref)\n            if self.parameters['scintillator']['material'] is None:\n                raise ValueError(f\"Material '{material_ref}' not found in materials_library.\")\n        else:\n            raise TypeError(\"Invalid scintillator material reference.\")\n</code></pre>"},{"location":"usage/api_reference/#coho.Simulation","title":"<code>Simulation</code>","text":"Source code in <code>coho/coho.py</code> <pre><code>class Simulation:\n    def __init__(self, config):\n        \"\"\"\n        Initialize the simulation using the configuration dictionary.\n        \"\"\"\n        self.materials_library = self.load_materials(config.get('materials_library', {}))\n        self.wavefronts_library = config.get('wavefronts_library', {})\n        self.components_library = config.get('components_library', {})\n        self.detectors_library = config.get('detectors_library', {})\n        self.simulation_config = config.get('simulation', {})\n\n        # Load the simulation components\n        self.wavefront = self.load_wavefront()\n        self.pipeline = self.load_pipeline()\n        self.detector = self.load_detector()\n        print(\"Simulation initialized.\")\n\n    def load_materials(self, materials_config):\n        materials = {}\n        for name, params in materials_config.items():\n            materials[name] = Material(\n                name=name,\n                formula=params['formula'],\n                density=params['density']\n            )\n        return materials\n\n    def resolve_anchor(self, ref, library):\n        \"\"\"\n        Resolve YAML anchors and aliases.\n        \"\"\"\n        if isinstance(ref, str) and ref.startswith('*'):\n            key = ref[1:]\n            return library.get(key)\n        elif isinstance(ref, dict):\n            return ref\n        return ref\n\n    def load_wavefront(self):\n        wavefront_ref = self.simulation_config.get('wavefront')\n        wavefront_config = self.resolve_anchor(wavefront_ref, self.wavefronts_library)\n        if wavefront_config is None:\n            return None\n        return Wavefront(name=wavefront_ref, params=wavefront_config)\n\n    def load_pipeline(self):\n        pipeline = []\n        pipeline_configs = self.simulation_config.get('pipeline', [])\n        for item in pipeline_configs:\n            component_ref = item.get('component')\n            # First, check in apertures\n            component_config = self.resolve_anchor(component_ref, self.components_library.get('apertures', {}))\n            # If not found, check in objects\n            if component_config is None:\n                component_config = self.resolve_anchor(component_ref, self.components_library.get('objects', {}))\n            if component_config is None:\n                continue  # Skip if component not found\n\n            # Resolve the material reference inside the component_config\n            if 'material' in component_config:\n                component_config['material'] = self.resolve_material(component_config['material'])\n\n            component = Component(\n                name=component_ref,\n                params=component_config,\n                materials_library=self.materials_library\n            )\n            pipeline.append(component)\n        return pipeline\n\n    def resolve_material(self, material_ref):\n        \"\"\"\n        Resolve the material reference from the materials_library.\n        \"\"\"\n        if isinstance(material_ref, str) and material_ref.startswith('*'):\n            # Remove the '*' and get the material name\n            material_name = material_ref[1:]\n            material = self.materials_library.get(material_name)\n            if material is None:\n                raise ValueError(f\"Material '{material_name}' not found in materials_library.\")\n            return material\n        elif isinstance(material_ref, Material):\n            return material_ref\n        elif isinstance(material_ref, dict):\n            # Create a Material instance\n            return Material(\n                name=material_ref.get('name', 'Unnamed Material'),\n                formula=material_ref.get('formula'),\n                density=material_ref.get('density')\n            )\n        else:\n            raise TypeError(\"Invalid material reference.\")\n\n    def load_detector(self):\n        detector_ref = self.simulation_config.get('detector')\n        detector_config = self.resolve_anchor(detector_ref, self.detectors_library)\n        if detector_config is None:\n            return None\n\n        # Resolve the scintillator material if present\n        scintillator_info = detector_config.get('scintillator')\n        if scintillator_info and 'material' in scintillator_info:\n            scintillator_info['material'] = self.resolve_material(scintillator_info['material'])\n\n        return Detector(\n            name=detector_ref,\n            params=detector_config,\n            materials_library=self.materials_library\n        )\n\n    def run(self):\n        \"\"\"\n        Execute the simulation.\n        \"\"\"\n        # Placeholder for simulation logic\n        print(\"\\nRunning simulation with the following configuration:\")\n        print(f\"Wavefront: {self.wavefront}\")\n        for i, component in enumerate(self.pipeline):\n            print(f\"Component {i+1}: {component}\")\n            print(f\"  Material: {component.material}\")\n        print(f\"Detector: {self.detector}\")\n        # Implement the wave propagation and interaction logic here\n        pass\n</code></pre>"},{"location":"usage/api_reference/#coho.Simulation.__init__","title":"<code>__init__(config)</code>","text":"<p>Initialize the simulation using the configuration dictionary.</p> Source code in <code>coho/coho.py</code> <pre><code>def __init__(self, config):\n    \"\"\"\n    Initialize the simulation using the configuration dictionary.\n    \"\"\"\n    self.materials_library = self.load_materials(config.get('materials_library', {}))\n    self.wavefronts_library = config.get('wavefronts_library', {})\n    self.components_library = config.get('components_library', {})\n    self.detectors_library = config.get('detectors_library', {})\n    self.simulation_config = config.get('simulation', {})\n\n    # Load the simulation components\n    self.wavefront = self.load_wavefront()\n    self.pipeline = self.load_pipeline()\n    self.detector = self.load_detector()\n    print(\"Simulation initialized.\")\n</code></pre>"},{"location":"usage/api_reference/#coho.Simulation.resolve_anchor","title":"<code>resolve_anchor(ref, library)</code>","text":"<p>Resolve YAML anchors and aliases.</p> Source code in <code>coho/coho.py</code> <pre><code>def resolve_anchor(self, ref, library):\n    \"\"\"\n    Resolve YAML anchors and aliases.\n    \"\"\"\n    if isinstance(ref, str) and ref.startswith('*'):\n        key = ref[1:]\n        return library.get(key)\n    elif isinstance(ref, dict):\n        return ref\n    return ref\n</code></pre>"},{"location":"usage/api_reference/#coho.Simulation.resolve_material","title":"<code>resolve_material(material_ref)</code>","text":"<p>Resolve the material reference from the materials_library.</p> Source code in <code>coho/coho.py</code> <pre><code>def resolve_material(self, material_ref):\n    \"\"\"\n    Resolve the material reference from the materials_library.\n    \"\"\"\n    if isinstance(material_ref, str) and material_ref.startswith('*'):\n        # Remove the '*' and get the material name\n        material_name = material_ref[1:]\n        material = self.materials_library.get(material_name)\n        if material is None:\n            raise ValueError(f\"Material '{material_name}' not found in materials_library.\")\n        return material\n    elif isinstance(material_ref, Material):\n        return material_ref\n    elif isinstance(material_ref, dict):\n        # Create a Material instance\n        return Material(\n            name=material_ref.get('name', 'Unnamed Material'),\n            formula=material_ref.get('formula'),\n            density=material_ref.get('density')\n        )\n    else:\n        raise TypeError(\"Invalid material reference.\")\n</code></pre>"},{"location":"usage/api_reference/#coho.Simulation.run","title":"<code>run()</code>","text":"<p>Execute the simulation.</p> Source code in <code>coho/coho.py</code> <pre><code>def run(self):\n    \"\"\"\n    Execute the simulation.\n    \"\"\"\n    # Placeholder for simulation logic\n    print(\"\\nRunning simulation with the following configuration:\")\n    print(f\"Wavefront: {self.wavefront}\")\n    for i, component in enumerate(self.pipeline):\n        print(f\"Component {i+1}: {component}\")\n        print(f\"  Material: {component.material}\")\n    print(f\"Detector: {self.detector}\")\n    # Implement the wave propagation and interaction logic here\n    pass\n</code></pre>"},{"location":"usage/api_reference/#coho.Wavefront","title":"<code>Wavefront</code>","text":"Source code in <code>coho/coho.py</code> <pre><code>class Wavefront:\n    def __init__(self, name, params):\n        \"\"\"\n        Base class for wavefronts.\n        \"\"\"\n        self.name = name\n        self.type = params.get('type')\n        self.amplitude = params.get('amplitude', 1)\n        self.phase = params.get('phase', 0)  # [radians]\n        self.resolution = params.get('resolution', 256)\n        self.pixel_size = params.get('pixel_size', 0.001)  # [cm]\n        self.energy = params.get('energy', 10)  # [keV]\n        self.position = params.get('position', 0)  # [cm]\n        self.parameters = params.get(self.type, {})\n\n    def __repr__(self):\n        return f\"Wavefront(name={self.name}, type={self.type}, energy={self.energy} keV)\"\n</code></pre>"},{"location":"usage/api_reference/#coho.Wavefront.__init__","title":"<code>__init__(name, params)</code>","text":"<p>Base class for wavefronts.</p> Source code in <code>coho/coho.py</code> <pre><code>def __init__(self, name, params):\n    \"\"\"\n    Base class for wavefronts.\n    \"\"\"\n    self.name = name\n    self.type = params.get('type')\n    self.amplitude = params.get('amplitude', 1)\n    self.phase = params.get('phase', 0)  # [radians]\n    self.resolution = params.get('resolution', 256)\n    self.pixel_size = params.get('pixel_size', 0.001)  # [cm]\n    self.energy = params.get('energy', 10)  # [keV]\n    self.position = params.get('position', 0)  # [cm]\n    self.parameters = params.get(self.type, {})\n</code></pre>"},{"location":"usage/examples/","title":"Examples","text":"<p>Practical examples demonstrating how to use COHO.</p>"}]}